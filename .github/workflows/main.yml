name: CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # test-redis-cli:
  #   runs-on: ubuntu-latest
  #   services:
  #     redis:
  #       image: redis
  #       ports:
  #         - 6380:6379 # map Redis default port 6379 to 6380 on the host

  #   steps:

  #   - name: Install Redis CLI
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install -y redis-tools

  #   - name: Set key in Redis
  #     run: |
  #       redis-cli -h localhost -p 6380 SET key 123

  #   - name: Get key from Redis
  #     run: |
  #       value=$(redis-cli -h localhost -p 6380 GET key)
  #       if [ "$value" = "123" ]; then
  #         echo "Test Passed: Key value is $value"
  #       else
  #         echo "Test Failed: Key value is not 123"
  #         exit 1
  #       fi
  build-and-test:
    runs-on: ubuntu-latest
    env:
        REDIS_HOST: localhost
        REDIS_PORT: 6380

    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Run Redis Containers
    #   run: docker-compose up --build -d
      run: |
        docker run --name redis_container -d -p 6380:6379 "redis:latest" 
    - name: Build and Run Containers
    #   run: docker-compose up --build -d
      run: |
        docker build -t my-go-service -f Dockerfile .
        docker run --name app_container -d -e REDIS_HOST=$REDIS_HOST -e REDIS_PORT=$REDIS_PORT --network host -p 8080:8080 my-go-service 
    - name: Run Integration Tests
      run: |
        docker build -t myapp-test -f Dockerfile.test .
        docker run --name test_container -e REDIS_HOST=$REDIS_HOST -e REDIS_PORT=$REDIS_PORT --network host myapp-test go test -tags integration ./tests/integration/...
    
    - name: Shutdown Docker Compose
      if: always()
      run: |
        docker stop redis_container
        docker rm redis_container
        docker stop app_container
        docker rm app_container
        docker rm test_container
